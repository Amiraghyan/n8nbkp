{
  "active": true,
  "connections": {
    "Calendar AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Calendar AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar - Get Events": {
      "ai_tool": [
        [
          {
            "node": "Calendar AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Google Calendar - Create events": {
      "ai_tool": [
        [
          {
            "node": "Calendar AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "cybercorpmeeting": {
      "main": [
        [
          {
            "node": "Calendar AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-01-19T22:52:12.909Z",
  "id": "YqNihtjofGlD8fpZ",
  "meta": {
    "templateId": "2703"
  },
  "name": "AI Agent : Google calendar assistant using OpenAI 2",
  "nodes": [
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {}
      },
      "id": "96bf895f-a18c-4a4c-bc26-3ec5d2372de5",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        920,
        1440
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "hIbzO0TgpkKLndpi",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool when you’re asked to retrieve events data.",
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "qk1u9i6nhucr2qjqkso96vv4bk@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "CyberOmnes Corp."
        },
        "options": {
          "timeMin": "={{ $fromAI('start_date') }}",
          "timeMax": "={{ $fromAI('end_date') }}"
        }
      },
      "id": "5cdece35-bd69-4c77-b240-963df8781d64",
      "name": "Google Calendar - Get Events",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        1720,
        1420
      ],
      "typeVersion": 1.2,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "akguFeu0y70N22uG",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this Google Calendar tool when you are asked to create an event.",
        "calendar": {
          "__rl": true,
          "value": "qk1u9i6nhucr2qjqkso96vv4bk@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "CyberOmnes Corp."
        },
        "start": "={{ $fromAI('start_date') }} ",
        "end": "={{ $fromAI('end_date') }} ",
        "useDefaultReminders": false,
        "additionalFields": {
          "attendees": [],
          "description": "={{ $fromAI('event_description') }} ",
          "summary": "={{ $fromAI('event_title') }} "
        }
      },
      "id": "634e6472-099c-4f0e-b9eb-67956c4881b8",
      "name": "Google Calendar - Create events",
      "type": "n8n-nodes-base.googleCalendarTool",
      "position": [
        2140,
        1420
      ],
      "typeVersion": 1.2,
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "akguFeu0y70N22uG",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body }}",
        "options": {
          "systemMessage": "=You are a Google Calendar assistant.\nYour primary goal is to assist the user in managing their calendar effectively using two tools: Event Creation and Event Retrieval. Always base your responses on the current date: \n{{ DateTime.local().toFormat('cccc d LLLL yyyy') }}.\nGeneral Guidelines:\nIf the user's initial message is vague (e.g., \"hello\" or a generic greeting) or does not specify a request, explain your capabilities clearly:\nExample: \"Hello! I can help you manage your Google Calendar. You can ask me to create an event or retrieve event data. What would you like me to do?\"\nIf the user specifies a request in their first message, begin preparing to use the appropriate tool:\nFor event creation, gather necessary details like start date, end date, title, and description.\nFor event retrieval, ask for the date range or time period they want to query.\nTool: Event Creation\nWhen asked to create an event:\n\nRequest the start and end dates/times from the user.\nDate format: YYYY-MM-DD HH:mm:ss\nCollect the following information:\nstart_date: Exact start date and time of the event.\nend_date: Exact end date and time of the event.\nevent_title: Event title in uppercase. Suggest one if not provided.\nevent_description: Generate a brief description and present it for confirmation.\nTool: Event Retrieval\nWhen asked to retrieve events:\n\nAsk for the date range or period they are interested in. Examples:\nFor \"last week,\" retrieve events from Monday of the previous week to Friday of the same week.\nFor \"today,\" use the current date.\nFormat the date range:\nstart_date: Start date and time in YYYY-MM-DD HH:mm:ss.\nend_date: End date and time in YYYY-MM-DD HH:mm:ss.\nKey Behaviors:\nClarity: Provide a clear and helpful introduction when the user's request is unclear.\nValidation: Confirm details with the user before finalizing actions.\nAdaptation: Handle varying levels of detail in requests (e.g., \"Add a meeting for next Monday morning\" or \"Retrieve my events for this weekend\").\nProactivity: Offer suggestions to fill in missing details or clarify ambiguous inputs.\nLanguage Matching: Ensure all interactions, including event titles, descriptions, and messages, are in the user's language to provide a seamless experience."
        }
      },
      "id": "9b259245-5fd5-4798-973e-bc6aa15da20f",
      "name": "Calendar AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        1340,
        620
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "content": "## OpenAI chat model\n\nThis node specifies the chat model used by the agent.  \nIn the template, the **default LLM is gpt-4o** for its high relevance.\n\nOther options:\n- You can **try gpt-4o-mini**, which is more cost-effective.\n- You can also choose **other LLM providers besides OpenAI**, but make sure the LLM you select **supports tool-calling**.\n",
        "height": 720,
        "width": 320,
        "color": 5
      },
      "id": "b902a7d0-c2ca-4ab9-9f2a-047b9ccb1678",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        820,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Window buffer memory\n\nThis node manages the **memory** of the agent, specifically the **context window length** for chat history.  \nThe default is set to 5 messages.\n\nNote:  \nThe **memory** is **temporary**. If you want to **store conversations with the agent**, you should use other nodes like **Postgres chat memory**.  \nThis can be easily set up with services like **[Supabase](https://supabase.com/)**.\n",
        "height": 720,
        "width": 320,
        "color": 5
      },
      "id": "c67e1e1b-ef9a-4fec-a860-4ec6b7439df6",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1220,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Google Calendar - Get Events\n\nThis sub-node is a tool used by the AI agent.  \nIts purpose is to **retrieve events based on the user input**.  \nFor example: *\"Can you give me the events from last week about internal process ?\"*\n\nThe AI agent is designed to **use this tool only** when it has a **date range**.  \nIf the user hasn’t provided a date range, the **AI agent will ask the user** for it.\n\nThe **variables** `{{ $fromAI('start_date') }}` and `{{ $fromAI('end_date') }}` are **dynamically filled by the AI**.\n",
        "height": 720,
        "width": 320,
        "color": 5
      },
      "id": "bf719d53-e21b-4bd5-9443-c24d008f732b",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1620,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Google Calendar - Create Events\n\nThis sub-node is a tool used by the AI agent.  \nIts purpose is to **create events based on the user input**.  \nFor example: \"Can you create an event 'Quarter revenue meeting' on [date] from [hour] to [hour] ?\"\n\nThe AI agent is designed to **use this tool only** when it has a **date range**.  \nIf the user hasn’t provided a **date range**, the AI agent will **ask the user** for it.  \nThe variables `{{ $fromAI('start_date') }}` and `{{ $fromAI('end_date') }}` are dynamically filled by the AI.\n\nBefore creating the event, the AI agent will **confirm with the user** if the **title** and **description** of the event are correct.  \nThe variables used for this are:\n- `{{ $fromAI('event_title') }}`\n- `{{ $fromAI('event_description') }}`\n",
        "height": 720,
        "width": 320,
        "color": 5
      },
      "id": "e94eb1f8-df42-414b-9bec-9e6991a5a832",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2020,
        860
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Having fun with it ? Here’s how to level up this AI agent !  \n\nThis workflow demonstrates **how easily you can set up an AI agent to call tools** for you using **n8n**.  \nThe tasks here are **useful but very basic**.  \n\nIf you want to **enhance the tool-calling capabilities**, consider the following:\n\n- Explore the **\"options\"** in the Google Calendar nodes to see additional features you can use.  \n  For example, let the AI agent add attendees to events it creates.\n\n- Implement the AI agent with your **teammates and link it to each calendar**.  \n  Use a `{{ $fromAI('') }}` variable for the calendar field and refine the prompts to suit your needs.\n\n- Add **more actions** for the AI agent to perform with the **Google Calendar API**, expanding its functionality.\n",
        "height": 380,
        "width": 720,
        "color": 4
      },
      "id": "707c011c-c822-4922-8ef7-c4368947d179",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1620,
        1620
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "cybercorpmeeting",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        460,
        860
      ],
      "id": "93b8dfc1-d8b0-4464-aab9-eed7cf8f82d5",
      "name": "cybercorpmeeting",
      "webhookId": "dc808e3f-75b9-4e50-81dd-199889618a8f"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1920,
        620
      ],
      "id": "1d37bbf0-f4c0-4525-95c9-b06156a3431d",
      "name": "Respond to Webhook"
    }
  ],
  "pinData": {
    "cybercorpmeeting": [
      {
        "json": {
          "headers": {
            "host": "hooks.omneslink.com",
            "x-real-ip": "172.70.178.43",
            "x-forwarded-for": "2a06:98c0:3600::103, 172.70.178.43",
            "x-forwarded-proto": "https",
            "connection": "upgrade",
            "content-length": "991",
            "cf-ray": "904a8084f51bef88-ORD",
            "cdn-loop": "cloudflare; loops=1; subreqs=1",
            "content-type": "text/plain;charset=UTF-8",
            "accept-encoding": "gzip, br",
            "cf-ew-via": "15",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "cf-worker": "bland.ai",
            "sec-fetch-mode": "cors",
            "cf-connecting-ip": "2a06:98c0:3600::103",
            "accept": "*/*",
            "accept-language": "*"
          },
          "params": {},
          "query": {},
          "body": "{\n  \"body\": {\n    \"date\": \"{{input.date}}\",\n    \"time\": \"{{input.time}}\",\n    \"service\": \"{{input.service}}\",\n    \"customer_name\": \"{{input.customer_name}}\",\n    \"customer_email\": \"{{input.customer_email}}\"\n  },\n  \"input_schema\": {\n    \"example\": {\n      \"speech\": \"Got it - one second while I book your appointment for the OmnesTalk agent on Monday at 2 PM.\",\n      \"date\": \"2024-04-22\",\n      \"time\": \"14:00\",\n      \"service\": \"OmnesTalk Starter\",\n      \"customer_name\": \"John Doe\",\n      \"customer_email\": \"john.doe@example.com\"\n    },\n    \"type\": \"object\",\n    \"properties\": {\n      \"speech\": \"string\",\n      \"date\": \"YYYY-MM-DD\",\n      \"time\": \"HH:mm (24-hour format)\",\n      \"service\": \"OmnesTalk Starter, OmnesTalk Pro, OmnesTalk Empresarial, or OmnesTalk Call Leads\",\n      \"customer_name\": \"string\",\n      \"customer_email\": \"string\"\n    }\n  },\n  \"response\": {\n    \"successfully_booked\": \"$.success\",\n    \"agent_name\": \"$.agent_name\",\n    \"appointment_details\": \"$.appointment\"\n  }\n}",
          "webhookUrl": "https://hooks.omneslink.com/webhook-test/cybercorpmeeting",
          "executionMode": "test"
        }
      }
    ]
  },
  "repo_name": "n8nbkp",
  "repo_owner": "cyberomnes",
  "repo_path": "cyberomnes/n8nbkp/",
  "settings": {},
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-01-19T23:14:55.000Z",
  "versionId": "9492c158-7716-4afd-bf4d-8139ab552269"
}